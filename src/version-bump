#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Packaging Scripts
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

import glob
import os
import re
import sys


# ====== Read Debian configuration ==========================================
debianChangeLogFileName = 'debian/changelog'
debianVersionString     = False

if os.path.isfile(debianChangeLogFileName):
   re_version = re.compile(r'^([a-zA-Z0-9-+]+)[ \t]*\((\d+)\.(\d+)\.(\d+)(.*|)-(\d[a-zA-Z-+]+\d)\)[ \t]*([a-zA-Z-+]+)[ \t]*;')
   try:
      debianChangeLogFile = open(debianChangeLogFileName, 'r', encoding='utf-8')
      header = debianChangeLogFile.readline()
      match = re_version.match(header)
      if match != None:
         debianVersionMajor     = int(match.group(2))
         debianVersionMinor     = int(match.group(3))
         debianVersionPatch     = int(match.group(4))
         debianVersionExtra     = match.group(5)
         debianVersionPackaging = match.group(6)
         debianDistribution     = match.group(7)
         debianVersionString    = str(debianVersionMajor) + '.' + \
                                  str(debianVersionMinor) + '.' + \
                                  str(debianVersionPatch) + debianVersionExtra
      debianChangeLogFile.close()
   except:
      sys.stderr.write('ERROR: Unable to read ' + debianChangeLogFileName + '\n')
      sys.exit(1)


# ====== Read RPM configuration =============================================
rpmSpecFileName  = None
rpmVersionString = None

rpmSpecFileNames = glob.glob('rpm/*.spec')
if len(rpmSpecFileNames) > 0:
   rpmSpecFileName     = rpmSpecFileNames[0]
   rpmVersionPackaging = None
   re_version = re.compile(r'^(Version:)[ \t]*(\d+)\.(\d+)\.(\d+)(.*|)')
   re_release = re.compile(r'^(Release:)[ \t]*(\d+)')
   try:
      rpmSpecFileOld = open(rpmSpecFileName, 'r', encoding='utf-8')
      contents = rpmSpecFileOld.readlines()
      for line in contents:
         match = re_version.match(line)
         if match != None:
            rpmVersionMajor = int(match.group(2))
            rpmVersionMinor = int(match.group(3))
            rpmVersionPatch = int(match.group(4))
            rpmVersionExtra = match.group(5)
            rpmVersionString = str(rpmVersionMajor) + '.' + \
                               str(rpmVersionMinor) + '.' + \
                               str(rpmVersionPatch) + rpmVersionExtra
         else:
            match = re_release.match(line)
            if match != None:
               rpmVersionPackaging = int(match.group(2))
      rpmSpecFileOld.close()
   except:
      sys.stderr.write('ERROR: Unable to read ' + rpmSpecFileName + '\n')
      sys.exit(1)


# ====== Read CMakeLists.txt configuration ==================================
cmakeFileName      = 'CMakeLists.txt'
cmakeFoundVersion  = False
cmakeVersionMajor  = None
cmakeVersionMinor  = None
cmakeVersionPatch  = None
cmakeVersionExtra  = None
cmakeVersionString = None

if os.path.isfile(cmakeFileName):
   re_major = re.compile(r'^SET\(BUILD_MAJOR[ \t]*"(\d+)"[ \t]*\)')
   re_minor = re.compile(r'^SET\(BUILD_MINOR[ \t]*"(\d+)"[ \t]*\)')
   re_patch = re.compile(r'^SET\(BUILD_PATCH[ \t]*"(\d+)(~[a-zA-Z0-9\.+]+|)"[ \t]*\)')
   try:
      cmakeFileOld = open(cmakeFileName, 'r', encoding='utf-8')
      contents = cmakeFileOld.readlines()
      for line in contents:
         match = re_major.match(line)
         if match != None:
            cmakeVersionMajor = int(match.group(1))
         else:
            match = re_minor.match(line)
            if match != None:
               cmakeVersionMinor = int(match.group(1))
            else:
               match = re_patch.match(line)
               if match != None:
                  cmakeVersionPatch = int(match.group(1))
                  cmakeVersionExtra = match.group(2)
      cmakeFileOld.close()
      if (cmakeVersionMajor != None) and \
         (cmakeVersionMinor != None) and \
         (cmakeVersionPatch != None) and \
         (cmakeVersionExtra != None):
         cmakeVersionString = str(cmakeVersionMajor) + '.' + \
                              str(cmakeVersionMinor) + '.' + \
                              str(cmakeVersionPatch) + cmakeVersionExtra
   except:
      sys.stderr.write('ERROR: Unable to read ' + cmakeFileName + '\n')
      sys.exit(1)


# ====== Check versions =====================================================
if cmakeVersionString == None:
   sys.stderr.write('ERROR: Unable to find version in CMakeFile.txt!\n')
   sys.exit(1)

sys.stdout.write('Version from CMakeFiles.txt:      ' + cmakeVersionString + '\n')

if debianVersionString != None:
   sys.stdout.write('Version from Debian control file: ' + debianVersionString + '\n')
   if debianVersionString != cmakeVersionString:
      sys.stderr.write('ERROR: Debian version does not match CMakeFile.txt version!\n')
      sys.exit(1)

if rpmVersionString != None:
   sys.stdout.write('Version from RPM spec file:       ' + rpmVersionString + '\n')
   if rpmVersionString != cmakeVersionString:
      sys.stderr.write('ERROR: RPM version does not match CMakeFile.txt version!\n')
      sys.exit(1)


# ====== Version bump =======================================================
versionMajor = cmakeVersionMajor
versionMinor = cmakeVersionMinor
versionPatch = cmakeVersionPatch
versionExtra = cmakeVersionExtra
for i in range(1, len(sys.argv)):
   if (sys.argv[i] == '-M') or (sys.argv[i] == '--major'):
      versionMajor = versionMajor + 1
      versionMinor = 0
      versionPatch = 0
      versionExtra = ""

   elif (sys.argv[i] == '-m') or (sys.argv[i] == '--minor'):
      versionMinor = versionMinor + 1
      versionPatch = 0
      versionExtra = ""

   elif (sys.argv[i] == '-p') or (sys.argv[i] == '--patch'):
      versionPatch = versionPatch + 1
      versionExtra = ""

   elif (sys.argv[i] == '-e') or (sys.argv[i] == '--extra'):
      if versionExtra == '':
         versionExtra = '~alpha1.0'
      else:
         match = re.match(r'^(~.*)(\d+)$', versionExtra)
         if match != None:
            e = int(match.group(2)) + 1
            versionExtra = match.group(1) + str(e)
         else:
            sys.stderr.write('ERROR: Unable to increment extra version ' + versionExtra + '!\n')
            sys.exit(1)

   else:
      sys.stderr.write('Usage: ' + sys.argv[0] + ' [-M|--major | -m|--minor | -p|--patch  -e|--extra]')
      sys.exit(1)

versionString = str(versionMajor) + '.' + str(versionMinor) + '.' + \
                str(versionPatch) + versionExtra
print(versionString)
