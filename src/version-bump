#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Packaging Scripts
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

import glob
import os
import re
import subprocess
import sys
import time


# ###### Show differences ###################################################
def colorDiff(old, new):
   h = '====== Updates for ' + old + ': '
   while len(h) < 78:
      h = h + '='
   sys.stdout.write(h + '\n')
   subprocess.call(['colordiff', old, new ])


# ###### Apply update #######################################################
def applyUpdate(new, old):
   sys.stdout.write('Updating ' + old + ' ...\n')
   os.rename(new, old)


# ====== Read packaging configuration =======================================
packageMaintainer     = None
packageMakeDist       = None
packagingConfFileName = 'packaging.conf'
re_package_maintainer = re.compile(r'^(MAINTAINER=\")(.*)(\".*$)')
re_package_makedist   = re.compile(r'^(MAKE_DIST=\")(.*)(\".*$)')
try:
   packagingConfFile = open(packagingConfFileName, 'r', encoding='utf-8')
   packagingConfFileContents = packagingConfFile.readlines()
   for line in packagingConfFileContents:
      match = re_package_maintainer.match(line)
      if match != None:
         packageMaintainer = match.group(2)
      else:
         match = re_package_makedist.match(line)
         if match != None:
            packageMakeDist = match.group(2)
   packagingConfFile.close()
except:
   sys.stderr.write('ERROR: Unable to read ' + packagingConfFileName + '\n')
   sys.exit(1)
if packageMaintainer == None:
   sys.stderr.write('ERROR: Unable to find MAINTAINER in ' + packagingConfFileName + '\n')
   sys.exit(1)
elif packageMakeDist == None:
   sys.stderr.write('ERROR: Unable to find MAKE_DIST in ' + packagingConfFileName + '\n')
   sys.exit(1)


# ====== Read Debian configuration ==========================================
debianChangeLogFileName = 'debian/changelog'
debianVersionString     = False

if os.path.isfile(debianChangeLogFileName):
   re_debian_version = re.compile(r'^([a-zA-Z0-9-+]+)[ \t]*\((\d+)\.(\d+)\.(\d+)(.*|)-(\d[a-zA-Z-+]+\d)\)[ \t]*([a-zA-Z-+]+)[ \t]*;')
   try:
      debianChangeLogFile = open(debianChangeLogFileName, 'r', encoding='utf-8')
      debianChangeLogFileContents = debianChangeLogFile.readlines()
      n = 0
      for line in debianChangeLogFileContents:
         n = n + 1
         if n > 1:
            break
         match = re_debian_version.match(line)
         if match != None:
            debianPackage          = match.group(1)
            debianVersionMajor     = int(match.group(2))
            debianVersionMinor     = int(match.group(3))
            debianVersionPatch     = int(match.group(4))
            debianVersionExtra     = match.group(5)
            debianVersionPackaging = match.group(6)
            debianDistribution     = match.group(7)
            debianVersionString    = str(debianVersionMajor) + '.' + \
                                     str(debianVersionMinor) + '.' + \
                                     str(debianVersionPatch) + debianVersionExtra
      debianChangeLogFile.close()
   except:
      sys.stderr.write('ERROR: Unable to read ' + debianChangeLogFileName + '\n')
      sys.exit(1)


# ====== Read RPM configuration =============================================
rpmSpecFileName  = None
rpmVersionString = None

rpmSpecFileNames = glob.glob('rpm/*.spec')
if len(rpmSpecFileNames) > 0:
   rpmSpecFileName     = rpmSpecFileNames[0]
   rpmVersionPackaging = None
   re_rpm_version = re.compile(r'^(Version:)[ \t]*(\d+)\.(\d+)\.(\d+)(.*|)')
   re_rpm_release = re.compile(r'^(Release:)[ \t]*(\d+)')
   try:
      rpmSpecFile = open(rpmSpecFileName, 'r', encoding='utf-8')
      rpmSpecFileContents = rpmSpecFile.readlines()
      for line in rpmSpecFileContents:
         match = re_rpm_version.match(line)
         if match != None:
            rpmVersionMajor = int(match.group(2))
            rpmVersionMinor = int(match.group(3))
            rpmVersionPatch = int(match.group(4))
            rpmVersionExtra = match.group(5)
            rpmVersionString = str(rpmVersionMajor) + '.' + \
                               str(rpmVersionMinor) + '.' + \
                               str(rpmVersionPatch) + rpmVersionExtra
         else:
            match = re_rpm_release.match(line)
            if match != None:
               rpmVersionPackaging = int(match.group(2))
      rpmSpecFile.close()
   except:
      sys.stderr.write('ERROR: Unable to read ' + rpmSpecFileName + '\n')
      sys.exit(1)


# ====== Read CMakeLists.txt configuration ==================================
cmakeFileName      = 'CMakeLists.txt'
cmakeFoundVersion  = False
cmakeVersionMajor  = None
cmakeVersionMinor  = None
cmakeVersionPatch  = None
cmakeVersionExtra  = None
cmakeVersionString = None

if os.path.isfile(cmakeFileName):
   re_cmakefile_major = re.compile(r'^SET\(BUILD_MAJOR[ \t]*"(\d+)"[ \t]*\)')
   re_cmakefile_minor = re.compile(r'^SET\(BUILD_MINOR[ \t]*"(\d+)"[ \t]*\)')
   re_cmakefile_patch = re.compile(r'^SET\(BUILD_PATCH[ \t]*"(\d+)(~[a-zA-Z0-9\.+]+|)"[ \t]*\)')
   try:
      cmakeFile = open(cmakeFileName, 'r', encoding='utf-8')
      cmakeFileContents = cmakeFile.readlines()
      for line in cmakeFileContents:
         match = re_cmakefile_major.match(line)
         if match != None:
            cmakeVersionMajor = int(match.group(1))
         else:
            match = re_cmakefile_minor.match(line)
            if match != None:
               cmakeVersionMinor = int(match.group(1))
            else:
               match = re_cmakefile_patch.match(line)
               if match != None:
                  cmakeVersionPatch = int(match.group(1))
                  cmakeVersionExtra = match.group(2)
      cmakeFile.close()
      if (cmakeVersionMajor != None) and \
         (cmakeVersionMinor != None) and \
         (cmakeVersionPatch != None) and \
         (cmakeVersionExtra != None):
         cmakeVersionString = str(cmakeVersionMajor) + '.' + \
                              str(cmakeVersionMinor) + '.' + \
                              str(cmakeVersionPatch) + cmakeVersionExtra
   except:
      sys.stderr.write('ERROR: Unable to read ' + cmakeFileName + '\n')
      sys.exit(1)


# ====== Check versions =====================================================
if cmakeVersionString == None:
   sys.stderr.write('ERROR: Unable to find version in CMakeFile.txt!\n')
   sys.exit(1)

sys.stdout.write('Version from CMakeFiles.txt:      ' + cmakeVersionString + '\n')

if debianVersionString != None:
   sys.stdout.write('Version from Debian control file: ' + debianVersionString + '\n')
   if debianVersionString != cmakeVersionString:
      sys.stderr.write('ERROR: Debian version does not match CMakeFile.txt version!\n')
      sys.exit(1)

if rpmVersionString != None:
   sys.stdout.write('Version from RPM spec file:       ' + rpmVersionString + '\n')
   if rpmVersionString != cmakeVersionString:
      sys.stderr.write('ERROR: RPM version does not match CMakeFile.txt version!\n')
      sys.exit(1)


# ====== Version bump =======================================================
versionMajor = cmakeVersionMajor
versionMinor = cmakeVersionMinor
versionPatch = cmakeVersionPatch
versionExtra = cmakeVersionExtra
for i in range(1, len(sys.argv)):
   if (sys.argv[i] == '-M') or (sys.argv[i] == '--major'):
      versionMajor = versionMajor + 1
      versionMinor = 0
      versionPatch = 0
      versionExtra = ""

   elif (sys.argv[i] == '-m') or (sys.argv[i] == '--minor'):
      versionMinor = versionMinor + 1
      versionPatch = 0
      versionExtra = ""

   elif (sys.argv[i] == '-p') or (sys.argv[i] == '--patch'):
      versionPatch = versionPatch + 1
      versionExtra = ""

   elif (sys.argv[i] == '-e') or (sys.argv[i] == '--extra') or (sys.argv[i][0:8] == '--extra='):
      if versionExtra == '':
         if sys.argv[i][8:] == '':
            versionExtra = '~alpha1.0'
         else:
            versionExtra = '~' + sys.argv[i][8:]
            match = re.match(r'^(~.*)(\d+)$', versionExtra)
            if match == None:
               versionExtra = versionExtra + '0'
      else:
         match = re.match(r'^(~.*)(\d+)$', versionExtra)
         if match != None:
            e = int(match.group(2)) + 1
            versionExtra = match.group(1) + str(e)
         else:
            sys.stderr.write('ERROR: Unable to increment extra version ' + versionExtra + '!\n')
            sys.exit(1)

   else:
      sys.stderr.write('Usage: ' + sys.argv[0] + ' [-M|--major | -m|--minor | -p|--patch  -e|--extra|--extra=label]')
      sys.exit(1)


# ======= Check new version =================================================
versionString = str(versionMajor) + '.' + str(versionMinor) + '.' + \
                str(versionPatch) + versionExtra
sys.stdout.write('New version:                      ' + versionString + '\n')

if (versionMajor == cmakeVersionMajor) and \
   (versionMinor == cmakeVersionMinor) and \
   (versionPatch == cmakeVersionPatch) and \
   (versionExtra == cmakeVersionExtra):
   sys.stdout.write('No change -> exiting.\n')
   sys.exit(1)


# ====== Update CMakeLists.txt ==============================================
cmakeFileNew = open(cmakeFileName + '.new', 'w', encoding='utf-8')

updatedMajor = False
updatedMinor = False
updatedPatch = False
for line in cmakeFileContents:
   match = re_cmakefile_major.match(line)
   if match != None:
      cmakeFileNew.write('SET(BUILD_MAJOR "' + str(versionMajor) + '")\n')
      updatedMajor = True
   else:
      match = re_cmakefile_minor.match(line)
      if match != None:
         cmakeFileNew.write('SET(BUILD_MINOR "' + str(versionMinor) + '")\n')
         updatedMinor = True
      else:
         match = re_cmakefile_patch.match(line)
         if match != None:
            cmakeFileNew.write('SET(BUILD_PATCH "' + str(versionPatch) + versionExtra + '")\n')
            updatedPatch = True
         else:
            cmakeFileNew.write(line)

cmakeFileNew.close()
if (updatedMajor == False) or (updatedMinor == False) or (updatedPatch == False):
   sys.stderr.write('ERROR: ' + cmakeFileName + ' update failed! Check entries!\n')
   sys.exit(1)


# ====== Update debian/changelog ============================================
if debianVersionString != None:
   debianNewChangeLogEntry = (cmakeVersionExtra == '')
   debianNewChangeLogFile = open(debianChangeLogFileName + '.new', 'w', encoding='utf-8')

   n = 0
   for line in debianChangeLogFileContents:
      n = n + 1

       # ------ Update existing entry ------------------------------------------
      if n == 1:
         debianNewChangeLogFile.write(debianPackage + ' (' + versionString + '-1ubuntu1) ' + \
                                      debianDistribution + '; urgency=medium\n')

         # ------ Create new entry ---------------------------------------------
         if debianNewChangeLogEntry == True:
            now = time.strftime('%a, %d %b %Y %H:%M:%S %z', time.localtime())
            debianNewChangeLogFile.write('\n  * New upstream release.\n\n -- ' + packageMaintainer + '  ' + now + '\n\n')


      if ((n > 1) or (debianNewChangeLogEntry == True)):
         # ------ Copy line from original file ---------------------------------
         debianNewChangeLogFile.write(line)

   debianNewChangeLogFile.close()


# ====== Update RPM spec file ===============================================
if rpmVersionString != None:
   rpmSpecFileNew = open(rpmSpecFileName + '.new', 'w', encoding='utf-8')

   re_rpm_changelog = re.compile(r'^%changelog[ \t]*$')
   inChangeLog = False

   for line in rpmSpecFileContents:
      if inChangeLog == False:
         match = re_rpm_version.match(line)
         if match != None:
            rpmSpecFileNew.write('Version: ' + versionString + '\n')
         else:
            match = re_rpm_release.match(line)
            if match != None:
               rpmSpecFileNew.write('Release: 1\n')
            else:
               match = re_rpm_changelog.match(line)
               if match != None:
                  inChangeLog = True
               # ------ Copy line from original file ------------------------
               rpmSpecFileNew.write(line)

      # ------ Update ChangeLog ---------------------------------------------
      else:
         if versionExtra == '':
            now = time.strftime('%a %d %b %Y', time.localtime())
            rpmSpecFileNew.write('* ' + now + ' ' + packageMaintainer + ' - ' + versionString + '\n')
            rpmSpecFileNew.write('- New upstream release.\n')
         rpmSpecFileNew.write(line)
         inChangeLog = False

   rpmSpecFileNew.close()


# ====== Check result =======================================================
colorDiff(cmakeFileName, cmakeFileName + '.new')
if debianVersionString != None:
   colorDiff(debianChangeLogFileName, debianChangeLogFileName + '.new')
if rpmVersionString != None:
   colorDiff(rpmSpecFileName, rpmSpecFileName + '.new')


# ====== Apply changes ======================================================
applyChanges = input('\x1b[34mApply update? [yes/no]?\x1b[0m ')
if ((applyChanges != 'yes') and (applyChanges != 'y')):
   sys.exit(0)

# ------ Update files -------------------------------------------------------
applyUpdate(cmakeFileName + '.new', cmakeFileName)
if debianVersionString != None:
   applyUpdate(debianChangeLogFileName + '.new', debianChangeLogFileName)
if rpmVersionString != None:
   applyUpdate(rpmSpecFileName + '.new', rpmSpecFileName)
sys.stdout.write('Done!\n')

# ------ Release version ----------------------------------------------------
if versionExtra == '':
   sys.stdout.write('New release!\n')

   # ------ Update changelog ------------------------------------------------
   pathname = os.path.dirname(sys.argv[0])
   if os.path.isfile("ChangeLog"):
      sys.stdout.write('Updating ChangeLog ...\n')
      subprocess.call([ pathname + '/update-changelog' ])

   # ------ Create Git tag --------------------------------------------------
   newGitTag = debianPackage + '-' + versionString
   applyChanges = input('\x1b[34mCreate signed Git tag ' + newGitTag + '? [yes/no]?\x1b[0m ')
   if ((applyChanges == 'yes') or (applyChanges == 'y')):
      subprocess.call([ 'git', 'clean', '-df' ])
      subprocess.call([ 'echo', 'git', 'tag', '-s', newGitTag, '-m', 'New release ' + versionString + '.' ])
